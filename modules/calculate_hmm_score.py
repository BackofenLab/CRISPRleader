#####################################################################################################################################
#### The function 'CalculateHmmScore' calculates the hmm score of all the related clusters of a leader.
#### A final Score of a cluster is evaluated using hmm score, mean and standard deviation.
#### The cluster with highest final Score is selected as most relevant cluster of the leader.
#####################################################################################################################################
import os
import subprocess
def calculate_hmm_score(EachRepeat,ClusterAverageSizeDictionary, eachLeaderSequence, Archaea_Bacteria):
    def cmd_remove1(each_cluster):
        each_cluster = int(each_cluster)        
        with open(ClusterMeanStdFile, "r") as f:
            list_lines = f.readlines()
            line = list_lines[each_cluster -1]
            line = line.split('\t')
            line[2] = line[2].rstrip()
        return line
            
    '''
    :param EachRepeat : This array contains the top most related clusters of a repeat and a final cluster is chosen among them
    :param ClusterAverageSizeDictionary : This dictionary contains the inforamtion about the average size of the leader of all the realted clusters
                                          and is used to trim the leader of the repeat according to the average size.
    :param eachLeaderSequence : This is the leader sequence of the repeat for which the Hmm score is calculated
    :param Archaea_Bacteria : Since there exists two files contating cluster mean and standard deviation, one for Archaea and other for Bacteria.
                              This parameter allows us to choose the desired file.
    :return FinalCluster : The final cluster of the repeat among related clusters is returned to the caller. 
    '''
    # choose the file containing inforamtion about each cluster mean and standard deviation
    if Archaea_Bacteria == "A":
        ClusterMeanStdFile = "lib/Archaea_LeaderClusters_mean_std.tab"                  ## File containing Cluster Archaea mean and standard deviation
        
    elif Archaea_Bacteria == "B":
        ClusterMeanStdFile = "lib/Bacteria_LeaderClusters_mean_std.tab"                 ## File containing Cluster Bacteria mean and standard deviation
    
    differenceToZero = float("inf") #This variable store the closest value to zero
    FinalCluster = "-"  # This function returns this variable. Since the variable is initialized in a below 'if' loop, the python interpreter 
                        # cannot recognize this variable. Hence, it is initialized here.
    
    DatasetFiles = os.listdir("Dataset") # list of file names in 'Dataset' folder
    
    EnableHighestScore = False ## If the variable is False, pick the cluster with final score closest to zero OR ELSE pick the cluster with highest final score
    
    # For each related cluster of the repeat, calculate the hmm score and find the final score for each cluster. Pick the cluster whose final score is closest to zero
    for EachCluster in EachRepeat:
        
        ClusterAverageSize = ClusterAverageSizeDictionary[EachCluster] # get the average size of the leader defined for the particular cluster
        # trim the leader of the repeat according to the average size of the cluster and write to a fasta file.
        TempLeaderFile = open("temp_folder/TempLeaderFile.fasta","w")
        TempLeaderFile.write(">1\n")
        TempLeaderFile.write(eachLeaderSequence[-ClusterAverageSize:])
        TempLeaderFile.close()
        
        # hmmsearch tool is evaluated on the above created file to compute the hmm score using the cluster's hmm file
        # and the output is written to a temporary file 'temp_out.txt'
        InputFileName = next((s for s in DatasetFiles if s.endswith(Archaea_Bacteria+EachCluster+".hmm")), None)
        
        cmd = "bin/hmmsearch --tblout temp_folder/temp_out.txt  Dataset/"+InputFileName+" temp_folder/TempLeaderFile.fasta  >/dev/null"
        os.popen(cmd)  # execute the hmm tool
        
        '''
        # get the mean and standard deviation of the cluster from the chosen file 
        cmd = "cat "+ClusterMeanStdFile+" | awk '$1 == '"+EachCluster+"''"
        eachClusterMeanStd = subprocess.check_output(cmd,shell=True)    #   execute the command and save the ouput in the variable        
        eachClusterMeanStd = eachClusterMeanStd.split()
        '''
        
        eachClusterMeanStd = cmd_remove1(EachCluster)
        
        
        ClusterMean = float(eachClusterMeanStd[1])  # get the mean
        ClusterStd = float(eachClusterMeanStd[2])   # get the standard deviation
        
        temp_outFile = open("temp_folder/temp_out.txt","r") # read the output file generated by hmmsearch tool
        
        # read the 4th line of the output file which contains the information about the hmm score
        for loop in range(0,4):
            searchScoreInFile = temp_outFile.readline()
        
        if "cluster" in searchScoreInFile:# if there exists a score in the file, then proceed
            searchScoreInFile = searchScoreInFile.split()
            Score = (float(searchScoreInFile[5]) - ClusterMean)/ ClusterStd # calculate the final score of the cluster using mean and standard deviation

            # The final score should lie between in the range of (-2,2)
            if -2 < Score < 2:
                if not EnableHighestScore:    # pick the cluster with final score closest to zero
                    if abs(Score) < differenceToZero:
                        differenceToZero = abs(Score)   # convert the +/- score to absolute (+) value
                        FinalCluster = EachCluster

                elif EnableHighestScore:    ## pick the cluster with highest final score
                    if Score > differenceToZero:
                        differenceToZero = Score
                        FinalCluster = EachCluster
                        print Score
                print " Cluster: " + str(EachCluster)+" Score: " + str(Score)
                    
           
    return FinalCluster

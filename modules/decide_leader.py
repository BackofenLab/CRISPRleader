####################################################################################################################
##### This function decides whether there exists a potential leader for the CRISPR sequence. If yes, it will write the leader to a file.
##### The function executes 'prodigal' tool to retrieve all the Protein positions in the genome.
##### These protein poitions are compared with the CRISPR and their corresponding leader positions to check for any intersections.
##### If any intersection is found with a gap of more than 40 nucleotides between protein and CRISPT, then the leader sequence is
##### trimmed so that there is no trace of protein exists in it. 
##### If intersection found with a gap of less than 40 nucleotides, then there exists no leader for the CRISPR.
##### If no intersection is found, then no changes are made to the leader.
####################################################################################################################

import os
import subprocess
from bisect import bisect_left
def decide_leader(Fastafile,Complete_partial_flag):
    def cmd_remove1():
		
        list_intervals = []
        with open('temp_folder/proteinRangeFile.txt', 'r') as f:
            for line in f:
                if "CDS" in line:
                    interval_part = line.split(' ')[18]
                    if "complement" in interval_part:
                        interval_part = interval_part.split('(')[1].split(')')[0] + "\n"
                    list_intervals.append(interval_part)       
                    
        f = open('temp_folder/myGenes_Range.txt', 'w')
        for interval in range(0, len(list_intervals)):			 
            f.write(list_intervals[interval])            
        f.close()
                
    '''
    :param FastaFile : This parameter contains the system path to the given genome or path to the file downloaded from ncbi. Prodigal tool is invoked on this fastafile.
    :param Complete_partial_flag : This boolean parameter contains whether the given genome is complete or partial. This information is needed while executing prodigal tool.
    '''
    
    print "\nFinding the protein sequences and their range in the genome..."
    print Fastafile
    cmd = "bin/./prodigal -i "+Fastafile+" -o temp_folder/proteinRangeFile.txt -c" # writing command to run prodigal tool on the fastafile and the output is saved in a temporary file
    if Complete_partial_flag == "PARTIAL": # if a genome is partial, then the command is appended with additional argument.
        cmd = cmd + " -p meta"
    cmd = cmd + " > /dev/null 2>&1" # forwading the print statements of the prodigal tool to null console    
    os.popen(cmd) # executing the prodigal command
    print "\nDeciding the potential leaders.."
    
    '''
    # collect all the proteins range of given genome from the output file generated by prodigal tool
    cmd = "grep 'CDS' temp_folder/proteinRangeFile.txt | sed 's/\CDS\ *//'|  sed -e 's/^[ \t]*//'|  sed -e 's/\<complement\>//g' | tr -d '()' > temp_folder/myGenes_Range.txt"
    os.popen(cmd)
    '''    
    cmd_remove1()  

    cmd = "cat temp_folder/myGenes_Range.txt  | cut -d. -f1"
    ProteinStartRange = subprocess.check_output(cmd,shell=True) # pick all the protein start range values
    ProteinStartRange = ProteinStartRange.split()   # The ouput is string seperated with spaces, this statement convert the output to list
    ProteinStartRange = map(int,ProteinStartRange)  # The protein start range values are converted from string format to integer
    
    cmd = "cat temp_folder/myGenes_Range.txt  | cut -d. -f3"
    ProteinEndRange = subprocess.check_output(cmd,shell=True)   # pick all the protein end range values
    ProteinEndRange = ProteinEndRange.split()   # The ouput is string seperated with spaces, this statement convert the output to list
    ProteinEndRange = map(int,ProteinEndRange)  # The protein end range values are converted from string format to integer
    
    # The leader sequences should not have traces of protein sequences. Process all the leader sequences and write the final leader sequences in a temporary file.
    WriteLeaderFile = open("temp_folder/CRISPR_Final_Leader.txt","w")
    #WriteLeaderFile.write("CRISPR_ID\tPotential_Leader\n================================================================================\n")
    
    # After processing the leaders, include the closest protein range, the leader and its position of each CRISPR along with its ID, consensus repeat, position and strand in a temporary file
    WriteFile = open("temp_folder/CRISPR_LeaderInfo.txt","w")
    WriteFile.write("CRISPR_ID\tConsensus\tCRISPR_Position\tProtein_Position\tLeader_Position\tStrand\tPotential_Leader\n")
    WriteFile.write("=====================================================================================================\n")
    count = 0
    
    # open the file which has the information of each each CRISPR, its range, consensus repeat, its strand, leader range and leader
    with open("temp_folder/CRISPR_Sequences.txt","r") as f:
        
        for eachLine in f:
            if count <= 1:  # ignore the first two lines-header and deliemter from the file
                count +=1
                continue
                
            # gather the strand, crispr start-end position, leader start-end position
            eachLine = eachLine.split() # Split the entire line into list
            Strand = eachLine[3]    # gather the strand

            EachCRISPRRange = eachLine[1]   # get the crispr range
            EachCRISPR_Start = int(EachCRISPRRange.split("-")[0])   # get the crispr start range from the line (eg: 12345-12455, where 12345 is the start position)
            EachCRISPR_End = int(EachCRISPRRange.split("-")[1])     # get the crispr end range from the line (eg: 12345-12455, where 12455 is the end position)
            
            EachLeaderRange = eachLine[4]   # get the leader range
            EachLeader_Start = int(EachLeaderRange.split("-")[0])   # get the leader start range
            EachLeader_End = int(EachLeaderRange.split("-")[1])     # get the leader end range
            
            # write CRISPR Id, consensus repeat and crispr position to the file
            WriteFile.write(eachLine[0]+"\t"+eachLine[2]+"\t"+eachLine[1]+"\t")
            
            # find the closest protein range and check whether the leader and the closest protein are bisected. 
            # If the strand is forward, find the closest protein range by checking the protein end range with crispr start position
            if Strand == "Forward":
                #ProteinEndRange is a list containing all the protein start ranges and EachCRISPR_Start is a value representing crispr starting position
                # The below statement find the index in the protein start range list whose value is closest to crispr starting position
                pos = bisect_left(ProteinEndRange, EachCRISPR_Start)                

                Diff = EachCRISPR_Start - ProteinEndRange[pos]  # find the difference between crispr starting position and the closest protein starting range
               
                
                # Meanwhile, write the closest protein details to the file
                WriteFile.write(str(ProteinStartRange[pos])+"-"+str(ProteinEndRange[pos])+"\t")
                
                # if the closest protein start position is found after the crispr start position and protein end position is found after crispr end position.
                # Two cases are possible. i) Either the protein started from the middle of crispr or ii) protein started after the crispr
                if Diff < 0 and ProteinEndRange[pos] > EachCRISPR_End: 
                    # if the protein start position is before than the crispr end position then we can conclude that the protein sequcence started from the middle of crispr
                    # and write the information to the file
                    if ProteinStartRange[pos] < EachCRISPR_End: 
                        WriteFile.write(str(EachLeader_Start)+"-"+str(EachLeader_End)+"\t"+Strand+"\tProtein in the middle of CRISPR\n")
                    # Else if the protein sequence started after the crispr, then there is no bisection of protein in the crispr or leader.
                    else:
                        # write the leader start-end position, strand and "yes". "yes" indicates that there exists a potential leader for the crispr.
                        WriteFile.write(str(EachLeader_Start)+"-"+str(EachLeader_End)+"\t"+Strand+"\tyes\n")
                        WriteLeaderFile.write(">"+eachLine[0]+"\n"+eachLine[5]+"\n")    # Also write the crispr ID and its leader to another file 
                
                # if the closest protein start position is found after the crispr start position and protein end range is found before the crispr end
                # then the protein is bisected with the crispr and no potential leader exists for the crispr
                elif Diff<0 and ProteinEndRange[pos] < EachCRISPR_End:
                    WriteFile.write(str(EachLeader_Start)+"-"+str(EachLeader_End)+"\t"+Strand+"\tProtein in the middle of CRISPR\n")
                    
                # if the closest protein start range found with a distance of 40 to 600 nucleotides from the crispr, trim the leader of the crispr accordingly.
                elif 40 <= Diff <=600:
                    EachLeader_Start = (ProteinEndRange[pos] + 1)-EachLeader_Start  # Leader starting position starts after the end of the protein sequence
                    WriteFile.write(str(ProteinEndRange[pos] + 1)+"-"+str(EachLeader_End)+"\t"+Strand+"\tyes\n") # write the leader start-end position, strand and "yes"
                    WriteLeaderFile.write(">"+eachLine[0]+"\n"+eachLine[5][EachLeader_Start:]+"\n") # write the CRISPR ID and trimmed leader to another file
                    
                # if the closest protein start range found with a distance of 0 to 40 nucleotides from the crispr, then we consider that no potential leader exists for the crispr
                elif 0<= Diff< 40 :
                    
                    WriteFile.write(str(EachLeader_Start)+"-"+str(EachLeader_End)+"\t"+Strand+"\tno\n")
                   
                # if the closest protein start range found with a distance of greater than 600 nucleotides from the crispr, then no changes for leader start and end positions
                else:
                    WriteLeaderFile.write(">"+eachLine[0]+"\n"+eachLine[5]+"\n")
                    WriteFile.write(str(EachLeader_Start)+"-"+str(EachLeader_End)+"\t"+Strand+"\tyes\n")
            
            # If the strand is reverse, find the closest protein range by checking the protein start range with crispr end position
            elif Strand == "Reverse":
                # The below statement find the index in the protein start range list whose value is closest to crispr ending position
                pos = bisect_left(ProteinStartRange, EachCRISPR_End)
                
                Diff = ProteinStartRange[pos] - EachCRISPR_End  # find the difference between crispr starting position and the closest protein starting range
                
                WriteFile.write(str(ProteinStartRange[pos])+"-"+str(ProteinEndRange[pos])+"\t"+str(EachLeader_Start)+"-")
                
                # if the protein sequence found before the crispr, then no changes to be made for the leader and write the information to the files
                if Diff < 0 and ProteinEndRange[pos] < EachCRISPR_Start:    
                    
                    WriteFile.write(str(EachLeader_End)+"\t"+Strand+"\tyes\n")
                    WriteLeaderFile.write(">"+eachLine[0]+"\n"+eachLine[5]+"\n")
                
                # if the traces of protein sequence found in the crispr, then no leader exists for the crispr
                elif Diff < 0 and ProteinEndRange[pos] > EachCRISPR_Start:
                    WriteFile.write(str(EachLeader_End)+"\t"+Strand+"\tProtein in the middle of CRISPR\n")
                
                # if the closest protein start range found with a distance of 40 to 600 nucleotides from the crispr, trim the leader of the crispr accordingly.
                elif 40 <= Diff <=600:    
                    EachLeader_End = EachLeader_End - (ProteinStartRange[pos] - 1)  #  Leader ends before starting the protein sequence
                    WriteFile.write(str(ProteinStartRange[pos] - 1)+"\t"+Strand+"\tyes\n")
                    WriteLeaderFile.write(">"+eachLine[0]+"\n"+eachLine[5][EachLeader_End:]+"\n") # trim the leader sequence and write to file
                # if the closest protein start range found with a distance of 0 to 40 nucleotides from the crispr, then we consider that no potential leader exists for the crispr
                elif 0<= Diff< 40 :
                    WriteFile.write(str(EachLeader_End)+"\t"+Strand+"\tno\n")
                    
                # if the closest protein start range found with a distance of greater than 600 nucleotides from the crispr, then no changes for leader start and end positions
                else:
                    WriteLeaderFile.write(">"+eachLine[0]+"\n"+eachLine[5]+"\n") # write the crispr ID and its leader to the file
                    WriteFile.write(str(EachLeader_End)+"\t"+Strand+"\tyes\n") # write the leader end position, its strand and "yes" for the potential leader

        WriteFile.close()
        WriteLeaderFile.close()
    print "\nLeaders of the repeats were decided.\n"
